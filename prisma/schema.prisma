// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id    String     @id @default(uuid())
  first_name String
  last_name  String
  email      String     @unique
  password   String
  DOB        String
  phone      Phone?
  donation   Donation[]
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
}

model Phone {
  phone_id     String   @id @default(uuid())
  country      String
  country_code String
  number       String
  user         User     @relation(fields: [user_id], references: [user_id])
  user_id      String   @unique
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
}


model Organization {
  org_id                String              @id @default(uuid())
  name                  String
  merchant_id           String              @unique
  email                 String              @unique
  phone                 String
  payment_processor     String
  company_registeration String
  logo                  String?
  primary_color         String?
  secondary_color       String?
  facebook              String?
  instagram             String?
  twitter               String?
  linkedin              String?
  tiktok                String?
  // Remove the orgRequest field
  orgRequest            OrgRequest?         @relation(fields: [request_id], references: [request_id])
  request_id            String?             @unique
  admin                 Admin[]
  announcement          Announcement[]
  donation              Donation[]
  donation_category     Donation_Category[]
  kiosk                 Kiosk[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

// Define the OrgRequest model
model OrgRequest {
  request_id            String        @id @default(uuid())
  name                  String
  email                 String        @unique
  phone                 String
  status                Status        @default(pending)
  company_registeration String
  created_at            DateTime      @default(now())
  updated_at            DateTime      @updatedAt
  // Add the org_id field to establish the one-to-one relationship
  organization          Organization?
}

model Admin {
  admin_id String @id @default(uuid())
  name     String
  email    String @unique
  password String

  role       Role         @default(owner)
  org        Organization @relation(fields: [org_id], references: [org_id])
  org_id     String
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
}

model superAdmin {
  super_admin_id String   @id @default(uuid())
  name           String
  email          String   @unique
  password       String
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
}

model Announcement {
  announcement_id String       @id @default(uuid())
  message         String
  type            String
  org             Organization @relation(fields: [org_id], references: [org_id])
  org_id          String
  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt
}

model Donation {
  donation_id          String             @id @default(uuid())
  amount               Float
  transaction_id       String?
  transaction          String?
  source               String?
  type                 typeDonation?
  status               statusDonation?    @default(pending)
  duration             String?
  category             Donation_Category? @relation(fields: [donation_category_id], references: [donation_category_id])
  donation_category_id String?
  org                  Organization?      @relation(fields: [org_id], references: [org_id])
  org_id               String?
  user                 User?              @relation(fields: [user_id], references: [user_id])
  user_id              String?
  kiosk                Kiosk?             @relation(fields: [kiosk_id], references: [kiosk_id])
  kiosk_id             String?
  created_at           DateTime           @default(now())
  updated_at           DateTime           @updatedAt
}

model Donation_Category {
  donation_category_id String              @id @default(uuid())
  name                 String
  description          String
  parent_id            String?
  donation_parent      Donation_Category?  @relation("donation_category_children", fields: [parent_id], references: [donation_category_id])
  children             Donation_Category[] @relation("donation_category_children")
  donation             Donation[]
  status               statusKiosk?        @default(inactive)
  org                  Organization?       @relation(fields: [org_id], references: [org_id])
  org_id               String?
  created_at           DateTime            @default(now())
  updated_at           DateTime            @updatedAt
}

model Kiosk {
  kiosk_id   String       @id @default(uuid())
  name       String?
  username   String?      @unique
  password   String?
  location   String?
  status     statusKiosk  @default(inactive)
  ip_address String?
  org        Organization @relation(fields: [org_id], references: [org_id])
  org_id     String
  donation   Donation[]
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
}

enum Role {
  owner
  employee
}

enum Status {
  pending
  approved
  rejected
}

enum statusKiosk {
  active
  inactive
}

enum statusDonation {
  success
  failed
  pending
}

enum typeDonation {
  one_time
  recurring
}
